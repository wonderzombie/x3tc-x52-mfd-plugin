unit DIRECTOUTPUT;
{**************************************************************************}
{                                                                          }
{    This C DLL header file first (automatic) conversion generated by:     }
{    HeadConv 4.0 (c) 2000 by Bob Swart (aka Dr.Bob - www.drbob42.com)     }
{      Final Delphi-Jedi (Darth) command-line units edition                }
{                                                                          }
{    Generated Date:  6/23/2011                                            }
{    Generated Time: 11:36:23 PM                                              }
{                                                                          }
{**************************************************************************}

interface
uses
{$IFDEF WIN32}
  Windows;
{$ELSE}
  Wintypes, WinProcs;
{$ENDIF}


{=> d:\!delphi\x52 x3 plugin\c\DIRECTOUTPUT.H <=}

{$IFNDEF DIRECTOUTPUT_H}
{$DEFINE DIRECTOUTPUT_H}

{ #pragma once }

{$IFDEF __cplusplus}
{$ENDIF}

{///============================================================================= }
{/// constants }
{///============================================================================= }

{/// Device Type Guids }
{/// {29DAD506-F93B-4f20-85FA-1E02C04FAC17} }

{/// Soft Buttons }
{/// Unused soft buttons }

{///============================================================================= }
{/// callbacks }
{///============================================================================= }

type
  = VOID (__STDCALL*PFN_DIRECTOUTPUT_DEVICE_CALLBACK)(IN VOID* HDEVICE, IN BOOL BADDED, IN VOID* PCTXT);
type
  = VOID (__STDCALL*PFN_DIRECTOUTPUT_SOFTBUTTON_CALLBACK)(IN VOID* HDEVICE, IN DWORD DWBUTTONS, IN VOID* PCTXT);
type
  = VOID (__STDCALL*PFN_DIRECTOUTPUT_PAGE_CALLBACK)(IN VOID* HDEVICE, IN DWORD DWPAGE, IN BOOL BACTIVATED, IN VOID* PCTXT);

{///============================================================================= }
{/// functions }
{///============================================================================= }

var
  DirectOutput_Initialize: function(const wszAppName: PIN WCHAR_T): HRESULT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  DirectOutput_Deinitialize: function: HRESULT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  DirectOutput_RegisterDeviceChangeCallback: function(pfnCb: IN PFN_DIRECTOUTPUT_DEVICE_CALLBACK; 
                                                      var pCtxt: IN VOID): HRESULT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  DirectOutput_Enumerate: function: HRESULT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  DirectOutput_GetDeviceType: function(var hDevice: IN VOID; 
                                       pGdDevice: OUT LPGUID): HRESULT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  DirectOutput_GetDeviceInstance: function(var hDevice: IN VOID; 
                                           pGdInstance: OUT LPGUID): HRESULT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  DirectOutput_RegisterSoftButtonChangeCallback: function(var hDevice: IN VOID; 
                                                          pfnCb: IN PFN_DIRECTOUTPUT_SOFTBUTTON_CALLBACK; 
                                                          var pCtxt: IN VOID): HRESULT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  DirectOutput_RegisterPageChangeCallback: function(var hDevice: IN VOID; 
                                                    pfnCb: IN PFN_DIRECTOUTPUT_PAGE_CALLBACK; 
                                                    var pCtxt: IN VOID): HRESULT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  DirectOutput_AddPage: function(var hDevice: IN VOID; 
                                 dwPage: IN DWORD; 
                                 const wszValue: PIN WCHAR_T; 
                                 bSetAsActive: IN BOOL): HRESULT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  DirectOutput_RemovePage: function(var hDevice: IN VOID; 
                                    dwPage: IN DWORD): HRESULT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  DirectOutput_SetLed: function(var hDevice: IN VOID; 
                                dwPage: IN DWORD; 
                                dwIndex: IN DWORD; 
                                dwValue: IN DWORD): HRESULT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  DirectOutput_SetString: function(var hDevice: IN VOID; 
                                   dwPage: IN DWORD; 
                                   dwIndex: IN DWORD; 
                                   cchValue: IN DWORD; 
                                   const wszValue: PIN WCHAR_T): HRESULT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
var
  DirectOutput_SetImage: function(var hDevice: IN VOID; 
                                  dwPage: IN DWORD; 
                                  dwIndex: IN DWORD; 
                                  cbValue: IN DWORD; 
                                  const pbValue: PIN UNSIGNED CHAR): HRESULT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

var
  DirectOutput_SetProfile: function(var hDevice: IN VOID; 
                                    cchFilename: IN DWORD; 
                                    const wszFilename: PIN WCHAR_T): HRESULT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{///============================================================================= }
{/// function pointers }
{///============================================================================= }

type
  = HRESULT (__STDCALL*PFN_DIRECTOUTPUT_INITIALIZE) (IN CONST WCHAR_T* WSZAPPNAME);
type
  = HRESULT (__STDCALL*PFN_DIRECTOUTPUT_DEINITIALIZE) ();
type
  = HRESULT (__STDCALL*PFN_DIRECTOUTPUT_REGISTERDEVICECHANGECALLBACK)(IN PFN_DIRECTOUTPUT_DEVICE_CALLBACK PFNCB, IN VOID* PCTXT);
type
  = HRESULT (__STDCALL*PFN_DIRECTOUTPUT_ENUMERATE) ();

type
  = HRESULT (__STDCALL*PFN_DIRECTOUTPUT_GETDEVICETYPE) (IN VOID* HDEVICE, OUT LPGUID PGDDEVICE);
type
  = HRESULT (__STDCALL*PFN_DIRECTOUTPUT_GETDEVICEINSTANCE) (IN VOID* HDEVICE, OUT LPGUID PGDINSTANCE);
type
  = HRESULT (__STDCALL*PFN_DIRECTOUTPUT_REGISTERSOFTBUTTONCHANGECALLBACK)(IN VOID* HDEVICE, IN PFN_DIRECTOUTPUT_SOFTBUTTON_CALLBACK PFNCB, IN VOID* PCTXT);
type
  = HRESULT (__STDCALL*PFN_DIRECTOUTPUT_REGISTERPAGECHANGECALLBACK)(IN VOID* HDEVICE, IN PFN_DIRECTOUTPUT_PAGE_CALLBACK PFNCB, IN VOID* PCTXT);

type
  = HRESULT (__STDCALL*PFN_DIRECTOUTPUT_ADDPAGE) (IN VOID* HDEVICE, IN DWORD DWPAGE, IN CONST WCHAR_T* WSZVALUE, IN BOOL BSETASACTIVE);
type
  = HRESULT (__STDCALL*PFN_DIRECTOUTPUT_REMOVEPAGE) (IN VOID* HDEVICE, IN DWORD DWPAGE);
type
  = HRESULT (__STDCALL*PFN_DIRECTOUTPUT_SETLED) (IN VOID* HDEVICE, IN DWORD DWPAGE, IN DWORD DWINDEX, IN DWORD DWVALUE);
type
  = HRESULT (__STDCALL*PFN_DIRECTOUTPUT_SETSTRING) (IN VOID* HDEVICE, IN DWORD DWPAGE, IN DWORD DWINDEX, IN DWORD CCHVALUE, IN CONST WCHAR_T* WSZVALUE);
type
  = HRESULT (__STDCALL*PFN_DIRECTOUTPUT_SETIMAGE) (IN VOID* HDEVICE, IN DWORD DWPAGE, IN DWORD DWINDEX, IN DWORD CBVALUE, IN CONST UNSIGNED CHAR* PBVALUE);

type
  = HRESULT (__STDCALL*PFN_DIRECTOUTPUT_SETPROFILE) (IN VOID* HDEVICE, IN DWORD CCHFILENAME, IN CONST WCHAR_T* WSZFILENAME);

{///============================================================================= }

{$IFDEF __cplusplus}
{$ENDIF}


{$ENDIF}

var
  DLLLoaded: Boolean { is DLL (dynamically) loaded already? }
    {$IFDEF WIN32} = False; {$ENDIF}

implementation

var
  SaveExit: pointer;
  DLLHandle: THandle;
{$IFNDEF MSDOS}
  ErrorMode: Integer;
{$ENDIF}

  procedure NewExit; far;
  begin
    ExitProc := SaveExit;
    FreeLibrary(DLLHandle)
  end {NewExit};

procedure LoadDLL;
begin
  if DLLLoaded then Exit;
{$IFNDEF MSDOS}
  ErrorMode := SetErrorMode($8000{SEM_NoOpenFileErrorBox});
{$ENDIF}
  DLLHandle := LoadLibrary('DIRECTOUTPUT.DLL');
  if DLLHandle >= 32 then
  begin
    DLLLoaded := True;
    SaveExit := ExitProc;
    ExitProc := @NewExit;
    @DirectOutput_Initialize := GetProcAddress(DLLHandle,'DirectOutput_Initialize');
  {$IFDEF WIN32}
    Assert(@DirectOutput_Initialize <> nil);
  {$ENDIF}
    @DirectOutput_Deinitialize := GetProcAddress(DLLHandle,'DirectOutput_Deinitialize');
  {$IFDEF WIN32}
    Assert(@DirectOutput_Deinitialize <> nil);
  {$ENDIF}
    @DirectOutput_RegisterDeviceChangeCallback := GetProcAddress(DLLHandle,'DirectOutput_RegisterDeviceChangeCallback');
  {$IFDEF WIN32}
    Assert(@DirectOutput_RegisterDeviceChangeCallback <> nil);
  {$ENDIF}
    @DirectOutput_Enumerate := GetProcAddress(DLLHandle,'DirectOutput_Enumerate');
  {$IFDEF WIN32}
    Assert(@DirectOutput_Enumerate <> nil);
  {$ENDIF}
    @DirectOutput_GetDeviceType := GetProcAddress(DLLHandle,'DirectOutput_GetDeviceType');
  {$IFDEF WIN32}
    Assert(@DirectOutput_GetDeviceType <> nil);
  {$ENDIF}
    @DirectOutput_GetDeviceInstance := GetProcAddress(DLLHandle,'DirectOutput_GetDeviceInstance');
  {$IFDEF WIN32}
    Assert(@DirectOutput_GetDeviceInstance <> nil);
  {$ENDIF}
    @DirectOutput_RegisterSoftButtonChangeCallback := GetProcAddress(DLLHandle,'DirectOutput_RegisterSoftButtonChangeCallback');
  {$IFDEF WIN32}
    Assert(@DirectOutput_RegisterSoftButtonChangeCallback <> nil);
  {$ENDIF}
    @DirectOutput_RegisterPageChangeCallback := GetProcAddress(DLLHandle,'DirectOutput_RegisterPageChangeCallback');
  {$IFDEF WIN32}
    Assert(@DirectOutput_RegisterPageChangeCallback <> nil);
  {$ENDIF}
    @DirectOutput_AddPage := GetProcAddress(DLLHandle,'DirectOutput_AddPage');
  {$IFDEF WIN32}
    Assert(@DirectOutput_AddPage <> nil);
  {$ENDIF}
    @DirectOutput_RemovePage := GetProcAddress(DLLHandle,'DirectOutput_RemovePage');
  {$IFDEF WIN32}
    Assert(@DirectOutput_RemovePage <> nil);
  {$ENDIF}
    @DirectOutput_SetLed := GetProcAddress(DLLHandle,'DirectOutput_SetLed');
  {$IFDEF WIN32}
    Assert(@DirectOutput_SetLed <> nil);
  {$ENDIF}
    @DirectOutput_SetString := GetProcAddress(DLLHandle,'DirectOutput_SetString');
  {$IFDEF WIN32}
    Assert(@DirectOutput_SetString <> nil);
  {$ENDIF}
    @DirectOutput_SetImage := GetProcAddress(DLLHandle,'DirectOutput_SetImage');
  {$IFDEF WIN32}
    Assert(@DirectOutput_SetImage <> nil);
  {$ENDIF}
    @DirectOutput_SetProfile := GetProcAddress(DLLHandle,'DirectOutput_SetProfile');
  {$IFDEF WIN32}
    Assert(@DirectOutput_SetProfile <> nil);
  {$ENDIF}
  end
  else
  begin
    DLLLoaded := False;
    { Error: DIRECTOUTPUT.DLL could not be loaded !! }
  end;
{$IFNDEF MSDOS}
  SetErrorMode(ErrorMode)
{$ENDIF}
end {LoadDLL};

begin
  LoadDLL;
end.
